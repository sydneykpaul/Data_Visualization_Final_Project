"8 to 9 years",
"9 to 10 years")] <- "5 - 10 years"
clean$YearsProgram[clean$YearsProgram %in% c("10 to 11 years",
"11 to 12 years",
"12 to 13 years",
"13 to 14 years",
"14 to 15 years")] <- "10 - 15 years"
clean$YearsProgram[clean$YearsProgram %in% c("15 to 16 years",
"16 to 17 years",
"17 to 18 years",
"18 to 19 years",
"19 to 20 years")] <- "15 - 20 years"
clean$YearsProgram <- factor(clean$YearsProgram, levels = c("Less than a year",
"1 - 5 years",
"5 - 10 years",
"10 - 15 years",
"15 - 20 years",
"20 or more years"))
# drop unused levels
clean <- droplevels(clean)
unique(clean$YearsProgram)
# create dataset for each group
answered <- filter(clean, StackOverflowAnswer != "Haven't done at all") %>% select(-c(StackOverflowAnswer))
asked <- filter(clean, StackOverflowNewQuestion != "Haven't done at all") %>% select(-c(StackOverflowNewQuestion))
copied <- filter(clean, StackOverflowCopiedCode != "Haven't done at all") %>% select(-c(StackOverflowCopiedCode))
tunedLCA <- function(data, form) {
best_lca <- data.frame(aic = Inf)
for (num_classes in 2:5) {
try_lca <- poLCA(formula = form,
data = data,
nclass = num_classes,
maxiter = 1000)
if(try_lca$aic < best_lca$aic) {
best_lca <- try_lca
}
print(num_classes)
}
return(best_lca)
}
formula_answered <- cbind(YearsProgram, StackOverflowCopiedCode, StackOverflowNewQuestion,
University, Professional, EmploymentStatus, ProgramHobby, FormalEducation) ~ 1
lca_answered <- tunedLCA(answered, formula_answered)
plot(lca_answered)
# create dataset for each group
answered <- filter(clean, StackOverflowAnswer != "Haven't done at all") %>%
select(-c(StackOverflowAnswer, StackOverflowNewQuestion, StackOverflowCopiedCode))
asked <- filter(clean, StackOverflowNewQuestion != "Haven't done at all") %>%
select(-c(StackOverflowAnswer, StackOverflowNewQuestion, StackOverflowCopiedCode))
copied <- filter(clean, StackOverflowCopiedCode != "Haven't done at all") %>%
select(-c(StackOverflowAnswer, StackOverflowNewQuestion, StackOverflowCopiedCode))
formula_answered <- cbind(YearsProgram, StackOverflowCopiedCode, StackOverflowNewQuestion,
University, Professional, EmploymentStatus, ProgramHobby, FormalEducation) ~ 1
lca_answered <- tunedLCA(answered, formula_answered)
# create dataset for each group
answered <- filter(clean, StackOverflowAnswer != "Haven't done at all") %>%
select(-c(StackOverflowAnswer, StackOverflowNewQuestion, StackOverflowCopiedCode))
asked <- filter(clean, StackOverflowNewQuestion != "Haven't done at all") %>%
select(-c(StackOverflowAnswer, StackOverflowNewQuestion, StackOverflowCopiedCode))
copied <- filter(clean, StackOverflowCopiedCode != "Haven't done at all") %>%
select(-c(StackOverflowAnswer, StackOverflowNewQuestion, StackOverflowCopiedCode))
tunedLCA <- function(data, form) {
formula <- cbind(YearsProgram, University, Professional,
EmploymentStatus, ProgramHobby, FormalEducation) ~ 1
best_lca <- data.frame(aic = Inf)
for (num_classes in 2:10) {
try_lca <- poLCA(formula = form,
data = data,
nclass = num_classes,
maxiter = 1000)
if(try_lca$aic < best_lca$aic) {
best_lca <- try_lca
}
print(num_classes)
}
return(best_lca)
}
lca_answered <- tunedLCA(answered)
tunedLCA <- function(data) {
formula <- cbind(YearsProgram, University, Professional,
EmploymentStatus, ProgramHobby, FormalEducation) ~ 1
best_lca <- data.frame(aic = Inf)
for (num_classes in 2:10) {
try_lca <- poLCA(formula = form,
data = data,
nclass = num_classes,
maxiter = 1000)
if(try_lca$aic < best_lca$aic) {
best_lca <- try_lca
}
print(num_classes)
}
return(best_lca)
}
lca_answered <- tunedLCA(answered)
tunedLCA <- function(data) {
formula <- cbind(YearsProgram, University, Professional,
EmploymentStatus, ProgramHobby, FormalEducation) ~ 1
best_lca <- data.frame(aic = Inf)
for (num_classes in 2:10) {
try_lca <- poLCA(formula = formula,
data = data,
nclass = num_classes,
maxiter = 1000)
if(try_lca$aic < best_lca$aic) {
best_lca <- try_lca
}
print(num_classes)
}
return(best_lca)
}
lca_answered <- tunedLCA(answered)
plot(lca_answered)
tunedLCA <- function(data) {
formula <- cbind(YearsProgram, University, Professional,
EmploymentStatus, ProgramHobby, FormalEducation) ~ 1
best_lca <- data.frame(aic = Inf)
for (num_classes in 2:5) {
try_lca <- poLCA(formula = formula,
data = data,
nclass = num_classes,
maxiter = 1000)
if(try_lca$aic < best_lca$aic) {
best_lca <- try_lca
}
print(num_classes)
}
return(best_lca)
}
lca_answered <- tunedLCA(answered)
plot(lca_answered)
tunedLCA <- function(data, num_try) {
formula <- cbind(YearsProgram, University, Professional,
EmploymentStatus, ProgramHobby, FormalEducation) ~ 1
best_lca <- data.frame(aic = Inf)
for (num_classes in num_try) {
try_lca <- poLCA(formula = formula,
data = data,
nclass = num_classes,
maxiter = 1000)
if(try_lca$aic < best_lca$aic) {
best_lca <- try_lca
}
print(num_classes)
}
return(best_lca)
}
lca_answered <- tunedLCA(answered, num_try = 2)
plot(lca_answered)
lca_asked <- tunedLCA(asked, num_try = 2)
plot(lca_asked)
lca_copied <- tunedLCA(copied, num_try = 2:20)
plot(lca_copied)
levels(raw_data$YearsProgram)
length(levels(raw_data$YearsProgram))
tunedLCA <- function(data, num_try) {
formula <- cbind(YearsProgram, University, Professional,
EmploymentStatus, ProgramHobby, FormalEducation) ~ 1
best_lca <- data.frame(aic = Inf)
for (num_classes in num_try) {
try_lca <- poLCA(formula = formula,
data = data,
nclass = num_classes,
maxiter = 1000,
verbose = FALSE)
if(try_lca$aic < best_lca$aic) {
best_lca <- try_lca
}
}
return(best_lca)
}
# load the necessary libraries
library(data.table)
library(poLCA)
library(tidyverse)
# set figure size (personal preference) and prevent code from showing in output
knitr::opts_chunk$set(echo = F, warning = FALSE, message = FALSE, fig.width = 10, fig.height = 5)
raw_data <- fread("survey_results_public.csv", sep = ",", header = T, stringsAsFactors = T)
respondent_percent_missing <- data.frame(ratio = (rowSums(is.na(raw_data)) / ncol(raw_data)))
ggplot(respondent_percent_missing, aes(x = ratio)) +
geom_histogram(color = "gray95", binwidth = 0.01) +
scale_x_continuous(labels = scales::percent, limits = c(0, 1)) +
labs(title = "Distribution of % Missing Responses per Respondent",
subtitle = "Appears to be bimodal with centers around 35% and 87%",
x = "Percent of responses that are missing",
y = "Number of respondents") +
theme_minimal()
# load the necessary libraries
library(data.table)
library(poLCA)
library(tidyverse)
# set figure size (personal preference) and prevent code from showing in output
knitr::opts_chunk$set(echo = F, warning = FALSE, message = FALSE, fig.width = 10, fig.height = 5)
# load the data
raw_data <- fread("survey_results_public.csv", sep = ",", header = T, stringsAsFactors = T)
respondent_percent_missing <- data.frame(ratio = (rowSums(is.na(raw_data)) / ncol(raw_data)))
ggplot(respondent_percent_missing, aes(x = ratio)) +
geom_histogram(color = "gray95", binwidth = 0.01) +
scale_x_continuous(labels = scales::percent, limits = c(0, 1)) +
labs(title = "Distribution of % Missing Responses per Respondent",
subtitle = "Appears to be bimodal with centers around 35% and 87%",
x = "Percent of responses that are missing",
y = "Number of respondents") +
theme_minimal()
# reduce dataset to necessary columns
keep_columns <- c("YearsProgram",
"StackOverflowCopiedCode",
"StackOverflowNewQuestion",
"StackOverflowAnswer",
"University",
"Professional",
"EmploymentStatus",
"ProgramHobby",
"FormalEducation")
reduced <- select(raw_data, keep_columns)
?detach
searchpaths()
detach(MASS)
remove.packages(MASS)
remove.packages("MASS")
remove.packages("MASS", lib = "C:/Program Files/R/R-3.5.0/library/MASS")
remove.packages("MASS", lib = "C:/Program Files/R/R-3.5.0/library")
# load the necessary libraries
library(data.table)
library(poLCA)
library(tidyverse)
# set figure size (personal preference) and prevent code from showing in output
knitr::opts_chunk$set(echo = F, warning = FALSE, message = FALSE, fig.width = 10, fig.height = 5)
raw_data <- fread("survey_results_public.csv", sep = ",", header = T, stringsAsFactors = T)
respondent_percent_missing <- data.frame(ratio = (rowSums(is.na(raw_data)) / ncol(raw_data)))
ggplot(respondent_percent_missing, aes(x = ratio)) +
geom_histogram(color = "gray95", binwidth = 0.01) +
scale_x_continuous(labels = scales::percent, limits = c(0, 1)) +
labs(title = "Distribution of % Missing Responses per Respondent",
subtitle = "Appears to be bimodal with centers around 35% and 87%",
x = "Percent of responses that are missing",
y = "Number of respondents") +
theme_minimal()
# load the necessary libraries
library(data.table)
library(poLCA)
library(tidyverse)
# set figure size (personal preference) and prevent code from showing in output
knitr::opts_chunk$set(echo = F, warning = FALSE, message = FALSE, fig.width = 10, fig.height = 5)
# load the data
raw_data <- fread("survey_results_public.csv", sep = ",", header = T, stringsAsFactors = T)
respondent_percent_missing <- data.frame(ratio = (rowSums(is.na(raw_data)) / ncol(raw_data)))
ggplot(respondent_percent_missing, aes(x = ratio)) +
geom_histogram(color = "gray95", binwidth = 0.01) +
scale_x_continuous(labels = scales::percent, limits = c(0, 1)) +
labs(title = "Distribution of % Missing Responses per Respondent",
subtitle = "Appears to be bimodal with centers around 35% and 87%",
x = "Percent of responses that are missing",
y = "Number of respondents") +
theme_minimal()
# reduce dataset to necessary columns
keep_columns <- c("YearsProgram",
"StackOverflowCopiedCode",
"StackOverflowNewQuestion",
"StackOverflowAnswer",
"University",
"Professional",
"EmploymentStatus",
"ProgramHobby",
"FormalEducation")
reduced <- select(raw_data, keep_columns)
# check missing
nrow(filter(reduced, is.na(StackOverflowCopiedCode), is.na(StackOverflowNewQuestion), is.na(StackOverflowAnswer)))
(17483 - 17111) / 17483 # StackOverflowCopiedCode
(17774 - 17111) / 17483 #StackOverflowNewQuestion
(17836 - 17111) / 17483 #StackOverflowAnswer
filtered <- reduced %>%
filter(!is.na(StackOverflowCopiedCode),
!is.na(StackOverflowNewQuestion),
!is.na(StackOverflowAnswer))
# check missing
colSums(is.na(filtered))
clean <- na.omit(filtered)
# remove prefer not to answers
clean$University[str_detect(clean$University, "prefer")] <- NA
clean$EmploymentStatus[str_detect(clean$EmploymentStatus, "prefer")] <- NA
clean$FormalEducation[str_detect(clean$FormalEducation, "prefer")] <- NA
clean <- na.omit(clean)
# reduce levels of YearsProgram
clean$YearsProgram <- as.character(clean$YearsProgram)
clean$YearsProgram[clean$YearsProgram %in% c("1 to 2 years",
"2 to 3 years",
"3 to 4 years",
"4 to 5 years")] <- "1 - 5 years"
clean$YearsProgram[clean$YearsProgram %in% c("5 to 6 years",
"6 to 7 years",
"7 to 8 years",
"8 to 9 years",
"9 to 10 years")] <- "5 - 10 years"
clean$YearsProgram[clean$YearsProgram %in% c("10 to 11 years",
"11 to 12 years",
"12 to 13 years",
"13 to 14 years",
"14 to 15 years")] <- "10 - 15 years"
clean$YearsProgram[clean$YearsProgram %in% c("15 to 16 years",
"16 to 17 years",
"17 to 18 years",
"18 to 19 years",
"19 to 20 years")] <- "15 - 20 years"
clean$YearsProgram <- factor(clean$YearsProgram, levels = c("Less than a year",
"1 - 5 years",
"5 - 10 years",
"10 - 15 years",
"15 - 20 years",
"20 or more years"))
# drop unused levels
clean <- droplevels(clean)
# create dataset for each group
answered <- filter(clean, StackOverflowAnswer != "Haven't done at all") %>%
select(-c(StackOverflowAnswer, StackOverflowNewQuestion, StackOverflowCopiedCode))
asked <- filter(clean, StackOverflowNewQuestion != "Haven't done at all") %>%
select(-c(StackOverflowAnswer, StackOverflowNewQuestion, StackOverflowCopiedCode))
copied <- filter(clean, StackOverflowCopiedCode != "Haven't done at all") %>%
select(-c(StackOverflowAnswer, StackOverflowNewQuestion, StackOverflowCopiedCode))
lca_answered <- tunedLCA(answered, num_try = 2)
tunedLCA <- function(data, num_try) {
formula <- cbind(YearsProgram, University, Professional,
EmploymentStatus, ProgramHobby, FormalEducation) ~ 1
best_lca <- data.frame(aic = Inf)
for (num_classes in num_try) {
try_lca <- poLCA(formula = formula,
data = data,
nclass = num_classes,
maxiter = 1000,
verbose = FALSE)
if(try_lca$aic < best_lca$aic) {
best_lca <- try_lca
}
}
return(best_lca)
}
tunedLCA <- function(data, num_try) {
formula <- cbind(YearsProgram, University, Professional,
EmploymentStatus, ProgramHobby, FormalEducation) ~ 1
best_lca <- data.frame(aic = Inf)
for (num_classes in num_try) {
try_lca <- poLCA(formula = formula,
data = data,
nclass = num_classes,
maxiter = 1000,
verbose = FALSE)
if(try_lca$aic < best_lca$aic) {
best_lca <- try_lca
}
}
return(best_lca)
}
lca_answered <- tunedLCA(answered, num_try = 2)
plot(lca_answered)
lca_asked <- tunedLCA(asked, num_try = 2)
plot(lca_asked)
lca_copied <- tunedLCA(copied, num_try = 2:20)
plot(lca_copied)
View(lca_copied)
range(lca_copied$predclass)
setwd("~/Notre Dame/Data Visualization/Final Project/dv_final_project_app")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# load the RDS file created in `geocoding_script.R` / `cleaning_business_data_script.R`
all_businesses <- readRDS("business_clean.rds")
all_businesses$year
range(all_businesses$year)
runApp()
runApp()
runApp()
filter(all_businesses, category == Arborist/Tree Service) %>% group_by(year) %>% summarise(n())
filter(all_businesses, category == "Arborist/Tree Service") %>% group_by(year) %>% summarise(n())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot(lca_answered, main = "string")
?poLCA
poLCA(formula = cbind(YearsProgram, University, Professional,
EmploymentStatus, ProgramHobby, FormalEducation) ~ 1,
data = answered,
nclass = 2, graphs = T,
maxiter = 1000,
verbose = FALSE)
plot(lca_answered)
lca_answered
View(lca_answered)
table(lca_answered)
kable(lca_answered)
kabble(lca_answered)
all_aic <- data.frame("num_classes", "aic")
all_aic
all_aic <- data.frame("num_classes" = NULL, "aic" = NULL)
all_aic
all_aic <- data.frame("num_classes" = 2:20,
"aic" = NA)
all_aic
all_aic$aic <- 22:40
all_aic$aic
ggplot(all_aic, aes(x = num_classes, y = aic)) +
geom_point() +
geom_line() +
labs(title = "Elbow plot of AIC by number of classes",
x = "Number of classes",
y = "AIC") +
theme_minimal()
lca_answered
tunedLCA <- function(data, formula, num_test = 0, group_name) {
# setup
set.seed(502)
best_lca_aic <- Inf
all_aic <- data.frame("num_classes" = 2:20,
"aic" = NA)
# try 2 to 20 classes
# storing aic, the best class num, and lca mod for num_test
for (num_classes in 2:20) {
try_lca <- poLCA(formula = formula,
data = data,
nclass = num_classes,
maxiter = 1000,
verbose = FALSE)
all_aic$aic[all_aic$num_classes == num_classes] <- try_lca$aic
if(try_lca$aic < best_lca_aic){
best_lca_aic <- try_lca$aic
best_num_classes <- num_classes
}
if (num_classes == num_test) {
num_test_result <- try_lca
}
}
# plot the aic for each number of classes
plot <- ggplot(all_aic, aes(x = num_classes, y = aic)) +
geom_point() +
geom_line() +
labs(title = "Elbow plot of AIC by number of classes",
subtitle = paste0("Group: ", group_name),
x = "Number of classes",
y = "AIC") +
theme_minimal()
# combine results to return
results <- data.frame("elbow_plot" = elbow_plot,
"num_test_results" = num_test_result,
"best_num_classes" = best_num_classes)
return(results)
}
# load function created for later
source('LCA_tuning_script.R')
runApp()
runApp()
runApp()
?addMarkers
runApp()
colorFactor
# ------------------------------------  Public Services Tab ------------------------------------ #
# Author: Sam
# Read in facilities data
facilities <- read.csv("Public_Facilities.txt")
unique(facilities$POPL_TYPE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
